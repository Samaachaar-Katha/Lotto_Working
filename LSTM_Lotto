import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Bidirectional, Dropout
from tensorflow.keras.optimizers import Adam


df = pd.read_csv('/kaggle/input/lotto-all-less7-26-april-23/lotto_ALL_LESS_BALL7.csv')

print(df.shape)

scaler = StandardScaler().fit(df.values)
transformed_dataset = scaler.transform(df.values)
transformed_df = pd.DataFrame(data=transformed_dataset, index=df.index)

# All our games
number_of_rows = df.values.shape[0]
print(f"Number of rows in dataset: {number_of_rows}")

# Amount of games we need to take into consideration for prediction
window_length = 2851  #  NUMBER OF rows LOOK UP IN CSV
print(f"Window length: {window_length}")

# Balls counts
number_of_features = df.values.shape[1]
print(f"Number of features: {number_of_features}")

X = np.empty([ number_of_rows - window_length, window_length, number_of_features], dtype=float)
y = np.empty([ number_of_rows - window_length, number_of_features], dtype=float)
for i in range(0, number_of_rows-window_length):
    X[i] = transformed_df.iloc[i : i+window_length, 0 : number_of_features]
    y[i] = transformed_df.iloc[i+window_length : i+window_length+1, 0 : number_of_features]

model = Sequential()

model.add(Bidirectional(LSTM(240, input_shape = (window_length, number_of_features), return_sequences = True)))

model.add(Dropout(0.2))

model.add(Bidirectional(LSTM(240, input_shape = (window_length, number_of_features), return_sequences = True)))

model.add(Dropout(0.2))

model.add(Bidirectional(LSTM(240, input_shape = (window_length, number_of_features), return_sequences = True)))

model.add(Bidirectional(LSTM(240, input_shape = (window_length, number_of_features), return_sequences = False)))

model.add(Dense(number_of_features))

model.compile(optimizer=Adam(learning_rate=0.0001), loss ='mse', metrics=['accuracy'])

model.fit(x=X, y=y, batch_size=600, epochs=20, verbose=2)

last_game = df.tail(1).values[0]
scaled_last_game = scaler.transform(last_game.reshape(1, -1))

prediction = model.predict(np.array([scaled_last_game])).astype(int)[0]
next_six_numbers = scaler.inverse_transform(prediction.reshape(1, -1)).astype(int)[0]

print(f"The predicted numbers for the next game are: {next_six_numbers}")


# WORKS FINE !!
